@page "/brand/edit/{BrandId:int}"
@using BlazorManagement.Data
@using MySql.Data.MySqlClient;
@using BlazorBootstrap;

<h3 class="mb-3">Edit Brand: @brands.BrandName</h3>

<EditForm Model="brands" OnValidSubmit="UpdateBrands">
    <DataAnnotationsValidator />
    <div class="form-group row mb-3">
        <div class="col-md-10">
            <label for="BrandName" class="form-label">Brand Name</label>
            <InputText @bind-Value=brands.BrandName class="form-control" />
            <div class="text-danger">
                <ValidationMessage For="() => brands.BrandName" />
            </div>
        </div>
    </div>

    <div class="form-group row mb-3">
        <div class="col-md-10">
            <label for="IsDeleted" class="form-label">Is deleted</label>
            <InputSelect @bind-Value=brands.IsDeleted class="form-select" id="IsDeleted">
                <option value="0" selected="@(brands.IsDeleted == 0)">Are trading</option>
                <option value="1" selected="@(brands.IsDeleted == 1)">Stop Trading</option>
            </InputSelect>
            <div class="text-danger">
                <ValidationMessage For="() => brands.IsDeleted" />
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <div class="d-flex">
                <a href="/brands" class="btn btn-secondary me-3 rounded-5"><Icon Name="IconName.ArrowLeftCircle" /> Back</a>
                <button type="submit" class="btn btn-primary rounded-5"><Icon Name="IconName.ArrowUpCircle" /> Update</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int BrandId { get; set; }
    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    Brands brands = new Brands();
    protected override void OnParametersSet()
    {
        if (BrandId != 0)
        {
            brands = GetBrands(BrandId);
        }
    }

    public Brands GetBrands(int BrandId)
    {
        var conn = DBMySQL.GetMySqlConnection();
        try
        {
            conn.Open();
            string sqlGetBrands = $"SELECT * FROM brands WHERE brand_id = {BrandId}";
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetBrands;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            if(mySqlDataReader.Read())
            {
                brands.BrandId = mySqlDataReader.GetInt32("brand_id");
                brands.BrandName = mySqlDataReader.GetString("brand_name");
                brands.IsDeleted = mySqlDataReader.GetInt32("is_deleted");
            }

            conn.Close();
        } catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
        return brands;
    }


    protected void UpdateBrands()
    {
        string BrandName = brands.BrandName;
        int IsDeleted = brands.IsDeleted;
        string SqlUpdate = $"UPDATE brands SET brand_name = '{BrandName}', is_deleted = {IsDeleted} WHERE brand_id = {BrandId}";
        MySqlConnection conn = DBMySQL.GetMySqlConnection();
        conn.Open();
        MySqlCommand cmd = new MySqlCommand(SqlUpdate, conn);
        cmd.ExecuteNonQuery();
        conn.Close();
        NavigationManager.NavigateTo("/brands", forceLoad: true);
    }
}