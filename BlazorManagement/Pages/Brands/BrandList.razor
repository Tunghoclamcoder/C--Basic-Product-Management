@page "/brands"
@using BlazorManagement.Data
@using MySql.Data.MySqlClient;
@inject NavigationManager NavigationManager

<PageTitle>Brand Management</PageTitle>

<div class="mb-3 d-flex justify-content-between align-items-center">
    <h3>Brand List</h3>
    <a href="/brands/create" class="btn btn-primary rounded-5"><Icon Name="IconName.PlusCircleDotted" /> Adding a new Brand</a>
</div>

<Grid TItem="Brands"
      Class="table table-bordered table-striped align-middle text-center"
      DataProvider="BrandDataProvider"
      AllowFiltering="false"
      AllowPaging="true"
      PageSize="5"
      AllowSorting="true"
      AllowSelection="false"
      Responsive="true"
      ItemsPerPageText="5"
      PageSizeSelectorItems="new int[] { 5, 10, 20 }"
      PaginationItemsTextFormat="{0} - {1} of {2} items">

    <GridColumn TItem="Brands" HeaderText="BrandId" PropertyName="BrandId" SortKeySelector="item => item.BrandId" Class="align-middle text-center">
         <div class="d-flex justify-content-center align-items-center">
            @context.BrandId
        </div>
    </GridColumn>

    <GridColumn TItem="Brands" HeaderText="Brand Name" PropertyName="BrandName" SortKeySelector="item => item.BrandName" 
        Class="align-middle text-center">
        <div class="d-flex justify-content-center align-items-center">
            @context.BrandName
        </div>
    </GridColumn>

    <GridColumn TItem="Brands" HeaderText="Is Deleted" PropertyName="IsDeleted" SortKeySelector="item => item.IsDeleted" 
        Class="align-middle text-center">
        <div class="d-flex justify-content-center align-items-center">
            @if (context.IsDeleted == 0)
            {
                <div class="badge bg-success rounded-5">
                    <Icon Name="IconName.CheckCircle" /> Are Trading
                </div>
            }
            else
            {
                <div class="badge bg-danger rounded-5">
                    <Icon Name="IconName.XCircle" /> Stop Trading
                </div>
            }
        </div>
    </GridColumn>

    <GridColumn TItem="Brands" HeaderText="Action" Class="align-middle text-center">
        <div class="d-flex justify-content-evenly align-items-center">
            <Button Type="ButtonType.Link" Color="ButtonColor.Info" To=@($"/brands/show/{@context.BrandId}") Class="rounded-5">
                <Icon Name="IconName.Eye" /> View
            </Button>
            <Button Type="ButtonType.Link" Color="ButtonColor.Primary" To=@($"/brands/edit/{@context.BrandId}") Class="rounded-5">
                <Icon Name="IconName.PencilSquare" /> Edit
            </Button>
            @if(context.IsDeleted == 0)
            {
                <button class="btn btn-danger rounded-5" @onclick="() => DeleteBrand(context.BrandId)"><Icon Name="IconName.Trash3" /> Delete</button>

            } else
            {
                <button class="btn btn-danger rounded-5 disabled" disabled><Icon Name="IconName.Trash3" /> Delete</button>

            } 
        </div>
    </GridColumn>
</Grid>

@code {
    private IEnumerable<Brands> brands = default!;

    private HashSet<Brands> selectedBrands = new();

    private async Task<GridDataProviderResult<Brands>> BrandDataProvider(GridDataProviderRequest<Brands> request)
    {
        if (brands is null) // pull employees only one time for client-side filtering, sorting, and paging
            brands = GetBrands(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(brands));
    }

    private IEnumerable<Brands> GetBrands()
    {
        List<Brands> list = new List<Brands>();

        try
        {
            string SqlGetBrands = String.Format("SELECT * FROM brands");
            MySqlConnection conn = DBMySQL.GetMySqlConnection();
            MySqlCommand cmd = conn.CreateCommand();
            conn.Open();
            cmd.CommandText = SqlGetBrands;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            while(mySqlDataReader.Read())
            {
                int BrandId = mySqlDataReader.GetInt32("brand_id");
                string BrandName = mySqlDataReader.GetString("brand_name");
                int IsDeleted = mySqlDataReader.GetInt32("is_deleted");
                Brands b = new Brands(BrandId, BrandName, IsDeleted);
                list.Add(b);
            }
            conn.Close();
        } catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }

        return list;
    }

    private Task OnSelectedItemsChanged(HashSet<Brands> brands)
    {
        selectedBrands = brands is not null && brands.Any() ? brands : new();
        return Task.CompletedTask;
    }

    private void DeleteBrand(int BrandId)
    {
        var conn = DBMySQL.GetMySqlConnection();
        try
        {
            conn.Open();

            // Kiểm tra nếu mục đã tồn tại và chưa bị xóa
            string sqlGetBrands = "SELECT * FROM brands WHERE brand_id = @BrandId AND is_deleted = 0";
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetBrands;
            cmd.Parameters.AddWithValue("@BrandId", BrandId);
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();

            if (mySqlDataReader.Read())
            {
                // Đóng MySqlDataReader trước khi thực hiện truy vấn khác trên cùng một kết nối
                mySqlDataReader.Close();

                // Đánh dấu mục là đã bị xóa
                string sqlDelete = "UPDATE brands SET is_deleted = 1 WHERE brand_id = @BrandId";
                MySqlCommand cmd2 = new MySqlCommand(sqlDelete, conn);
                cmd2.Parameters.AddWithValue("@BrandId", BrandId);
                cmd2.ExecuteNonQuery();
            }

            conn.Close();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            if (conn.State == System.Data.ConnectionState.Open)
            {
                conn.Close();
            }
        }

        // Điều hướng lại trang brands sau khi xóa
        NavigationManager.NavigateTo("/brands", forceLoad: true);
    }

}