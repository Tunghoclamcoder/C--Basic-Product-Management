@page "/products/create"
@using BlazorManagement.Data
@using MySql.Data.MySqlClient;
@using BlazorBootstrap;
@inject NavigationManager NavigationManager

<h3 class="mb-3">Create a new Product</h3>

<EditForm Model="products" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="row g-3">
        <div class="col-6">
            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="ProductName" class="form-label">Product Name</label>
                    <InputText @bind-Value=products.ProductName class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => products.ProductName" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Quantity" class="form-label">Quantity</label>
                    <InputNumber @bind-Value=products.Quantity class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => products.Quantity" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Price" class="form-label">Price</label>
                    <InputNumber @bind-Value=products.Price class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => products.Price" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Description" class="form-label">Description</label>
                    <InputText @bind-Value=products.Description class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => products.Description" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Brand" class="form-label">Brand</label>
                    <InputSelect @bind-Value=products.BrandId class="form-select" id="SelectBrand">
                        <option value="0" selected>-- Choose a brand --</option>
                        @foreach (var br in brands)
                        {
                            <option value="@br.BrandId">@br.BrandName</option>
                        }
                    </InputSelect>
                    <div class="text-danger">
                        <ValidationMessage For="() => products.BrandId" />
                    </div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Status" class="form-label">Status</label>
                    <InputSelect @bind-Value=products.Status class="form-select" id="SelectStatus">
                        <option value="0">Are Trading</option>
                        <option value="1">Stop Trading</option>
                    </InputSelect>
                    <div class="text-danger">
                        <ValidationMessage For="() => products.Status" />
                    </div>
                </div>
            </div>
            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Image" class="form-label">Image</label>
                    <InputFile OnChange="HandleFileSelected" @bind-Value=products.Image class="form-control" />
                    @if(ImageDataUrl != null)
                    {
                        <img src="@ImageDataUrl" class="mt-3" style="max-width: 350px"/>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
           <div class="d-flex">
                <a href="/products" class="btn btn-secondary me-3 rounded-5"><Icon Name="IconName.ArrowLeftCircle" /> Back</a>
                <Button Type="ButtonType.Submit" class="btn btn-primary rounded-5"><Icon Name="IconName.Save" /> Save</Button>
           </div>
        </div>
    </div>
</EditForm>

@code {
    Products products = new Products();
    private string ImageDataUrl = "";
    private IBrowserFile selectedFile;

    private IEnumerable<Brands> brands = default!;
    private IEnumerable<Brands> GetBrands()
    {
        List<Brands> list = new List<Brands>();

        try
        {
            string SqlGetBrands = String.Format("SELECT * FROM brands");
            MySqlConnection conn = DBMySQL.GetMySqlConnection();
            MySqlCommand cmd = conn.CreateCommand();
            conn.Open();
            cmd.CommandText = SqlGetBrands;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            while (mySqlDataReader.Read())
            {
                int BrandId = mySqlDataReader.GetInt32("brand_id");
                string BrandName = mySqlDataReader.GetString("brand_name");
                int IsDeleted = mySqlDataReader.GetInt32("is_deleted");
                Brands b = new Brands(BrandId, BrandName, IsDeleted);
                list.Add(b);
            }
            conn.Close();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        return list;
    }

    protected override void OnInitialized()
    {
        brands = GetBrands();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await SaveImageToServer(selectedFile);

            string ProductName = products.ProductName;
            int Quantity = products.Quantity;
            float Price = products.Price;
            int BrandId = products.BrandId;
            string Description = products.Description;

            string Image = products.Image;
            int Status = products.Status;

            string SqlInsert = "INSERT INTO products(product_name, quantity, price, brand_id, description, image, status) " +
                              "VALUES(@ProductName, @Quantity, @Price, @BrandId, @Description, @Image, @Status)";

            using (var conn = DBMySQL.GetMySqlConnection())
            {
                await conn.OpenAsync();

                using (var cmd = new MySqlCommand(SqlInsert, conn))
                {
                    cmd.Parameters.AddWithValue("@ProductName", ProductName);
                    cmd.Parameters.AddWithValue("@Quantity", Quantity);
                    cmd.Parameters.AddWithValue("@Price", Price);
                    cmd.Parameters.AddWithValue("@BrandId", BrandId);
                    cmd.Parameters.AddWithValue("@Description", Description);
                    cmd.Parameters.AddWithValue("@Image", Image);
                    cmd.Parameters.AddWithValue("@Status", Status);

                    await cmd.ExecuteNonQueryAsync();
                }
            }

            NavigationManager.NavigateTo("/products", forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var resizeFile = await e.File.RequestImageFileAsync("image/jpeg", 350, 350);
        var buffer = new byte[resizeFile.Size];
        await resizeFile.OpenReadStream().ReadAsync(buffer);
        ImageDataUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task SaveImageToServer(IBrowserFile file)
    {
        if (file != null)
        {
            var FileName = file.Name;
            var folderPath = Path.Combine("wwwroot", "uploads"); //wwwroot/uploads
            var filePath = Path.Combine(folderPath, FileName); //wwwroot/uploads/...
            Directory.CreateDirectory(folderPath);
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream(100000000).CopyToAsync(fileStream);
            }
            products.Image = $"uploads/{FileName}";
        }
    }
}