@page "/products/edit/{ProductId:int}"
@using BlazorManagement.Data
@using MySql.Data.MySqlClient;
@using BlazorBootstrap;

<h3 class="mb-3">Edit Product: @products.ProductName - #@products.ProductId</h3>

<EditForm Model="products" OnValidSubmit="UpdateProduct">
    <DataAnnotationsValidator />
    <div class="row g-3">
        <div class="col-6">
            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="ProductName" class="form-label">Product Name</label>
                    <InputText @bind-Value="products.ProductName" class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => products.ProductName" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Quantity" class="form-label">Quantity</label>
                    <InputNumber @bind-Value="products.Quantity" class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => products.Quantity" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Price" class="form-label">Price</label>
                    <InputNumber @bind-Value="products.Price" class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => products.Price" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Description" class="form-label">Description</label>
                    <InputText @bind-Value="products.Description" class="form-control" />
                    <div class="text-danger">
                        <ValidationMessage For="() => products.Description" />
                    </div>
                </div>
            </div>

            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Brand" class="form-label">Brand</label>
                    <InputSelect @bind-Value="products.BrandId" class="form-select" id="SelectBrand">
                        <option value="0">-- Choose a brand --</option>
                        @foreach (var br in brands)
                        {
                            <option value="@br.BrandId" selected="@(products.BrandId == br.BrandId)">@br.BrandName</option>
                        }
                    </InputSelect>

                    <div class="text-danger">
                        <ValidationMessage For="() => products.BrandId" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Status" class="form-label">Status</label>
                    <InputSelect @bind-Value="products.Status" class="form-select" id="SelectStatus">
                        <option value="0" selected="@(products.Status == 0)">Are Trading</option>
                        <option value="1" selected="@(products.Status == 1)">Stop Trading</option>
                    </InputSelect>
                    <div class="text-danger">
                        <ValidationMessage For="() => products.Status" />
                    </div>
                </div>
            </div>
            <div class="form-group row mb-3">
                <div class="col-md-10">
                    <label for="Image" class="form-label">Image</label>
                    <InputFile OnChange="HandleFileSelected" class="form-control" />
                    @if (ImageDataUrl != null)
                    {
                        <img src="@ImageDataUrl" class="mt-3" style="max-width: 400px" />
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <div class="d-flex">
                <a href="/products" class="btn btn-secondary me-3 rounded-5"><Icon Name="IconName.ArrowLeftCircle" /> Back</a>
                <button type="submit" class="btn btn-primary rounded-5"><Icon Name="IconName.ArrowUpCircle" /> Update</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ProductId { get; set; }
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    Products products = new Products();
    List<Brands> brands = new List<Brands>();

    private string ImageDataUrl = "";
    private IBrowserFile selectedFile;

    protected override void OnParametersSet()
    {
        if (ProductId != 0)
        {
            products = GetProducts(ProductId);
            GetBrands();
        }
    }

    public Products GetProducts(int ProductId)
    {
        var conn = DBMySQL.GetMySqlConnection();
        try
        {
            conn.Open();
            string sqlGetProducts = $"SELECT * FROM products WHERE product_id = {ProductId}";
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetProducts;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            if (mySqlDataReader.Read())
            {
                products.ProductId = mySqlDataReader.GetInt32("product_id");
                products.ProductName = mySqlDataReader.GetString("product_name");
                products.Quantity = mySqlDataReader.GetInt32("quantity");
                products.Price = mySqlDataReader.GetFloat("price");
                products.BrandId = mySqlDataReader.GetInt32("brand_id");
                products.Description = mySqlDataReader.GetString("description");
                products.Image = mySqlDataReader.GetString("image");
                products.Status = mySqlDataReader.GetInt32("status");

                ImageDataUrl = products.Image;
            }

            conn.Close();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        return products;
    }

    public void GetBrands()
    {
        var conn = DBMySQL.GetMySqlConnection();
        try
        {
            conn.Open();
            string sqlGetBrands = "SELECT * FROM brands";
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetBrands;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            while (mySqlDataReader.Read())
            {
                Brands br = new Brands();
                br.BrandId = mySqlDataReader.GetInt32("brand_id");
                br.BrandName = mySqlDataReader.GetString("brand_name");
                br.IsDeleted = mySqlDataReader.GetInt32("is_deleted");
                brands.Add(br);
            }

            conn.Close();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        foreach (var br in brands)
        {
            Console.WriteLine(br.BrandName);
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var resizeFile = await e.File.RequestImageFileAsync("image/jpeg", 400, 400);
        var buffer = new byte[resizeFile.Size];
        await resizeFile.OpenReadStream().ReadAsync(buffer);
        ImageDataUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task SaveImageToServer(IBrowserFile file)
    {
        if (file != null)
        {
            var FileName = file.Name;
            var folderPath = Path.Combine("wwwroot", "uploads"); //wwwroot/uploads
            var filePath = Path.Combine(folderPath, FileName); //wwwroot/uploads/...
            Directory.CreateDirectory(folderPath);
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(fileStream);
            }
            products.Image = $"uploads/{FileName}";
        }
    }

    private async Task UpdateProduct()
    {
        try
        {
            await SaveImageToServer(selectedFile);

            string SqlUpdate = "UPDATE products SET product_name = @ProductName, quantity = @Quantity, price = @Price, brand_id = @BrandId, description = @Description, image = @Image, status = @Status WHERE product_id = @ProductId";

            using (var conn = DBMySQL.GetMySqlConnection())
            {
                await conn.OpenAsync();

                using (var cmd = new MySqlCommand(SqlUpdate, conn))
                {
                    cmd.Parameters.AddWithValue("@ProductName", products.ProductName);
                    cmd.Parameters.AddWithValue("@Quantity", products.Quantity);
                    cmd.Parameters.AddWithValue("@Price", products.Price);
                    cmd.Parameters.AddWithValue("@BrandId", products.BrandId);
                    cmd.Parameters.AddWithValue("@Description", products.Description);
                    cmd.Parameters.AddWithValue("@Image", products.Image);
                    cmd.Parameters.AddWithValue("@Status", products.Status);
                    cmd.Parameters.AddWithValue("@ProductId", ProductId);

                    await cmd.ExecuteNonQueryAsync();
                }
            }

            NavigationManager.NavigateTo("/products", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
